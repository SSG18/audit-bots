// Discord Audit Bot –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π
const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, EmbedBuilder, PermissionsBitField } = require('discord.js');
const http = require('http');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!process.env.DISCORD_TOKEN) {
  console.error('–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω Discord –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç DISCORD_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞');
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CLIENT_ID
if (!process.env.CLIENT_ID) {
  console.error('–û–®–ò–ë–ö–ê: CLIENT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç CLIENT_ID=id_–≤–∞—à–µ–≥–æ_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  process.exit(1);
}

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers // –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
  ]
});

// ID –∫–∞–Ω–∞–ª–∞, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–æ—Ç
const AUDIT_CHANNEL_ID = '1369770031109640314';
// ID —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
const AUTHORIZED_ROLE_ID = '1130178461898641512';

// –°–æ–∑–¥–∞–µ–º slash-–∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
const auditCommand = new SlashCommandBuilder()
  .setName('audit')
  .setDescription('–°–æ–∑–¥–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä—Å–∫—É—é –∑–∞–ø–∏—Å—å –æ –∫–∞–¥—Ä–æ–≤–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏')
  .addStringOption(option =>
    option.setName('–æ—Ñ–∏—Ü–µ—Ä')
      .setDescription('–í–∞—à–µ –§–ò–û –∏ –Ω–æ–º–µ—Ä —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è')
      .setRequired(true))
  .addUserOption(option =>
    option.setName('—Å–æ—Ç—Ä—É–¥–Ω–∏–∫')
      .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è')
      .setRequired(true))
  .addStringOption(option =>
    option.setName('–ø–∞—Å–ø–æ—Ä—Ç')
      .setDescription('–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)')
      .setRequired(true))
  .addStringOption(option =>
    option.setName('–æ—Å–Ω–æ–≤–∞–Ω–∏–µ')
      .setDescription('–û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏')
      .setRequired(true))
  .addStringOption(option => 
    option.setName('–¥–∞—Ç–∞')
      .setDescription('–î–∞—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)')
      .setRequired(true));

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥
const registerCommands = async () => {
  try {
    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    const commands = [auditCommand.toJSON()];
    
    console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash-–∫–æ–º–∞–Ω–¥...');
    
    await rest.put(
      Routes.applicationCommands(process.env.CLIENT_ID),
      { body: commands }
    );
    
    console.log('Slash-–∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
  }
};

client.once('ready', () => {
  console.log(`–ë–æ—Ç ${client.user.tag} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!`);
  registerCommands();
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;
  if (interaction.commandName !== 'audit') return;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
  if (interaction.channelId !== AUDIT_CHANNEL_ID) {
    return interaction.reply({ 
      content: '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∞—É–¥–∏—Ç–∞.', 
      ephemeral: true 
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
  if (!interaction.member.roles.cache.has(AUTHORIZED_ROLE_ID)) {
    return interaction.reply({ 
      content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', 
      ephemeral: true 
    });
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
  const officerInfo = interaction.options.getString('–æ—Ñ–∏—Ü–µ—Ä');
  const targetUser = interaction.options.getUser('—Å–æ—Ç—Ä—É–¥–Ω–∏–∫');
  const passport = interaction.options.getString('–ø–∞—Å–ø–æ—Ä—Ç');
  const reason = interaction.options.getString('–æ—Å–Ω–æ–≤–∞–Ω–∏–µ');
  const date = interaction.options.getString('–¥–∞—Ç–∞');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const targetMember = await interaction.guild.members.fetch(targetUser.id);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∏–º—è –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞ (—Ñ–æ—Ä–º–∞—Ç: "–î–û–õ–ñ–ù–û–°–¢–¨ | –ò–º—è –∏ –§–∞–º–∏–ª–∏—è")
  let position = "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
  let employeeName = targetUser.username;
  
  if (targetMember.nickname) {
    const nicknameParts = targetMember.nickname.split('|');
    if (nicknameParts.length >= 2) {
      position = nicknameParts[0].trim();
      employeeName = nicknameParts[1].trim();
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ embed-—Å–æ–æ–±—â–µ–Ω–∏–µ
  const auditEmbed = new EmbedBuilder()
    .setColor(0x2B2D31)
    .setTitle('üìã –ó–∞–ø–∏—Å—å –æ –∫–∞–¥—Ä–æ–≤–æ–π –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏')
    .setDescription(`**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:** ${targetUser}`)
    .setTimestamp()
    .addFields(
      { name: 'üë§ –ê—É–¥–∏—Ç–æ—Ä', value: officerInfo, inline: false },
      { name: 'üìù –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', value: employeeName, inline: false },
      { name: 'ü™™ –ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞', value: passport, inline: false },
      { name: 'üî∞ –î–æ–ª–∂–Ω–æ—Å—Ç—å', value: position, inline: false },
      { name: 'üìÑ –û—Å–Ω–æ–≤–∞–Ω–∏–µ', value: reason, inline: false },
      { name: 'üìÖ –î–∞—Ç–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏', value: date, inline: false }
    )
    .setFooter({ text: '–°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π' });
  
  await interaction.reply({ embeds: [auditEmbed] });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on('error', error => {
  console.error('–û—à–∏–±–∫–∞ Discord –∫–ª–∏–µ–Ω—Ç–∞:', error);
  
  if (error.message.includes('TokenInvalid')) {
    console.error('---------------------------------------------------');
    console.error('–û–®–ò–ë–ö–ê: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω Discord –±–æ—Ç–∞.');
    console.error('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.error('1. –¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏');
    console.error('2. –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω');
    console.error('3. –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ Discord Developer Portal');
    console.error('---------------------------------------------------');
    console.error('–†–µ—à–µ–Ω–∏–µ:');
    console.error('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–µ .env');
    console.error('2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ Discord Developer Portal');
    console.error('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
    console.error('---------------------------------------------------');
    process.exit(1);
  }
});

process.on('unhandledRejection', error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  
  if (error.message.includes('TokenInvalid')) {
    console.error('---------------------------------------------------');
    console.error('–û–®–ò–ë–ö–ê: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω Discord –±–æ—Ç–∞.');
    console.error('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –≤ —Ñ–∞–π–ª–µ .env');
    console.error('---------------------------------------------------');
    process.exit(1);
  }
});

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks –Ω–∞ Render.com
const server = http.createServer((req, res) => {
  if (req.url === '/health') {
    res.writeHead(200);
    res.end('Bot is running!');
  } else {
    res.writeHead(404);
    res.end('Not found');
  }
});

server.listen(process.env.PORT || 3000, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try {
  console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...');
  client.login(process.env.DISCORD_TOKEN)
    .catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
      if (error.message.includes('TokenInvalid')) {
        console.error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–µ—Ä–Ω—ã–π.');
      } else if (error.message.includes('disallowed intents')) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ Discord Developer Portal –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã.');
      }
      process.exit(1);
    });
} catch (error) {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
  process.exit(1);
}
